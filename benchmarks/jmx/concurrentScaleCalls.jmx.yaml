---
execution:
- concurrency: 10
  iterations: 3
  ramp-up: 5s
  scenario: Concurrent Scale Up Model/Scale Down Model Requests
scenarios:
  Concurrent Scale Up Model/Scale Down Model Requests:
    requests:
    - follow-redirects: true
      label: Scale Up Model
      method: PUT
      url: ${__P(protocol,http)}://${__P(hostname,127.0.0.1)}:${__P(management_port,8081)}/models/${model}?min_worker=${scale_up_workers}
    - follow-redirects: true
      label: Scale Down Model
      method: PUT
      url: ${__P(protocol,http)}://${__P(hostname,127.0.0.1)}:${__P(management_port,8081)}/models/${model}?min_worker=${scale_down_workers}
    store-cache: false
    store-cookie: false
    use-dns-cache-mgr: false
    variables:
      count: ${__P(count,1)}
      model: ${__P(model_name,squeezenet)}
      scale_down_workers: ${__P(scale_down_workers,2)}
      scale_up_workers: ${__P(scale_up_workers,8)}

services:
  - module: monitoring
    server-agent:
      - address: localhost:9009
        label: mms-server  # if you specify label, it will be used in reports instead of ip:port
        interval: 1s    # polling interval
        logging: True # those logs will be saved to "SAlogs_192.168.0.1_4444.csv" in the artifacts dir
        metrics:
          - sum_cpu_percent
          - sum_memory_percent
          - sum_num_handles
          - mms_workers


reporting:
- module: passfail
  criteria:
  - class: bzt.modules.monitoring.MonitoringCriteria
    subject: mms-server/mms_workers
    condition: '>'
    threshold: 8
    timeframe: 5s
    fail: true
    stop: true
  - class: bzt.modules.monitoring.MonitoringCriteria
    subject: mms-server/mms_workers
    condition: '<'
    threshold: 2
    timeframe: 5s
    fail: true
    stop: true